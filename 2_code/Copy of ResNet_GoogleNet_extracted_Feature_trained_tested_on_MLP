{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of ResNet&GoogleNet_extracted_Feature_trained&tested_on_MLP","provenance":[{"file_id":"19icwuReOl1CQekwzg_Ff8HaPW_DuVk8O","timestamp":1653845845343},{"file_id":"1mXhGkGnTYBvoQvP7-ZtFRBZ36pRVfvrN","timestamp":1653165546944},{"file_id":"1Esr3Yq9Tbf1lath38uYrVzVwBEtoNSbg","timestamp":1651303166984}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"3c25a2cb8aab4d05bc31378a9331a09d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_c9eb7f974ec74e4f985089296821b1b0","IPY_MODEL_a0d412b453854d23824a2fd4bf73afa0","IPY_MODEL_0345a4002c3943f19a8302a0e2e45a5e"],"layout":"IPY_MODEL_791c9c60eaec4b8a95202ed70f567dca"}},"c9eb7f974ec74e4f985089296821b1b0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2f7eddb0011841678c2672f27f4fd674","placeholder":"​","style":"IPY_MODEL_5bb9d321b15a4a88b3351bc756ec46fc","value":"100%"}},"a0d412b453854d23824a2fd4bf73afa0":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_6758b3d71d504d4f90033817eef1d6d6","max":52147035,"min":0,"orientation":"horizontal","style":"IPY_MODEL_47c28426ecfe4ea39c24c42a999d13b8","value":52147035}},"0345a4002c3943f19a8302a0e2e45a5e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1871d097e63848da914d3b3a6def6bab","placeholder":"​","style":"IPY_MODEL_49b53d7991804c11af1040420c0dc107","value":" 49.7M/49.7M [00:00&lt;00:00, 97.3MB/s]"}},"791c9c60eaec4b8a95202ed70f567dca":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2f7eddb0011841678c2672f27f4fd674":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5bb9d321b15a4a88b3351bc756ec46fc":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6758b3d71d504d4f90033817eef1d6d6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"47c28426ecfe4ea39c24c42a999d13b8":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"1871d097e63848da914d3b3a6def6bab":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"49b53d7991804c11af1040420c0dc107":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.optim import lr_scheduler\n","from torch.utils.data import Dataset,DataLoader,TensorDataset\n","import torchvision\n","from torchvision.transforms import transforms\n","from torchvision import models\n","import matplotlib.pyplot as plt"],"metadata":{"id":"csGc0JoFVTaJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JjoQ20pxrYYj"},"outputs":[],"source":["from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive \n","from google.colab import auth \n","from oauth2client.client import GoogleCredentials\n","\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)\n","\n","import numpy as np\n","import pandas as pd\n","\n","file_id = \"1WZLFr195SGw2_UCzis-Djuov8c4HJPk1\"\n","downloaded = drive.CreateFile({'id': file_id})\n","downloaded.GetContentFile('CXR_label.csv')\n","\n","file_id = \"1EixCdXLWw-tOh1ONlbIcQVTdw865c3sn\"\n","downloaded = drive.CreateFile({'id': file_id})\n","downloaded.GetContentFile('CXR_image.npz')\n","\n","file_id = \"1RYZe6fiviC1ReJZb4H5B6nVb2-vUoEx7\"\n","downloaded = drive.CreateFile({'id': file_id})\n","downloaded.GetContentFile('CT_label.csv')\n","\n","file_id = \"1WE6ntEDaXWAGMiphJqwG6uKGr-HxkV6Y\"\n","downloaded = drive.CreateFile({'id': file_id})\n","downloaded.GetContentFile('CT_image.npz')\n","\n","CXR_label = pd.read_csv('CXR_label.csv')\n","CXR_data = np.load(file='CXR_image.npz')\n","CXR_data_3d = CXR_data['arr']\n","\n","CT_label = pd.read_csv('CT_label.csv')\n","CT_data = np.load(file='CT_image.npz')\n","CT_data_3d = CT_data['arr']"]},{"cell_type":"markdown","source":["Split data set"],"metadata":{"id":"0qEdMY_MCkpZ"}},{"cell_type":"code","source":["CT_cov = CT_label[CT_label['finding']=='COVID-19']\n","CT_nor = CT_label[CT_label['finding']=='Normal']\n","CT_pne = CT_label[CT_label['finding']=='Pneumonia']\n","\n","CXR_cov = CXR_label[CXR_label['finding']=='COVID-19']\n","CXR_nor = CXR_label[CXR_label['finding']=='Normal']\n","CXR_pne = CXR_label[CXR_label['finding']=='Pneumonia']"],"metadata":{"id":"4tV_W1cOROWl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#train_data = []\n","train_label = []\n","train_CT = []\n","train_CXR = []\n","#w = 0.5\n","\n","for i in range(300):\n","\n","  CTimg1 = CT_data_3d[CT_cov.index[i]]\n","  CXRimg1 = CXR_data_3d[CXR_cov.index[i]]\n","  #img1 = CTimg1*w + CXRimg1*(1-w)\n","\n","  #train_data.append(img1)\n","  train_label.append(2)\n","  train_CT.append(CTimg1)\n","  train_CXR.append(CXRimg1)\n","\n","\n","  CTimg2 = CT_data_3d[CT_nor.index[i]]\n","  CXRimg2 = CXR_data_3d[CXR_nor.index[i]]\n","  #img2 = CTimg2*w + CXRimg2*(1-w)\n","\n","  train_CT.append(CTimg2)\n","  train_CXR.append(CXRimg2)\n","  #train_data.append(img2)\n","  train_label.append(0)\n","\n","  CTimg3 = CT_data_3d[CT_pne.index[i]]\n","  CXRimg3 = CXR_data_3d[CXR_pne.index[i]]\n","  #img3 = CTimg3*w + CXRimg3*(1-w)\n","\n","  train_CT.append(CTimg3)\n","  train_CXR.append(CXRimg3)\n","  #train_data.append(img3)\n","  train_label.append(1)\n","\n","#train_data = np.array(train_data)\n","train_CXR = np.array(train_CXR)\n","train_CT = np.array(train_CT)\n","train_label = np.array(train_label)"],"metadata":{"id":"pSyqYEXDRNsQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(train_label)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oN6sMDIpEly8","executionInfo":{"status":"ok","timestamp":1653167111956,"user_tz":-480,"elapsed":13,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"c2b81696-2a1e-48f7-ec83-12682970798a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["900"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["#test_data = []\n","test_CXR = []\n","test_CT = []\n","test_label = []\n","#w = 0.5\n","\n","for i in range(300,325):\n","\n","  CTimg1 = CT_data_3d[CT_cov.index[i]]\n","  CXRimg1 = CXR_data_3d[CXR_cov.index[i]]\n","  #img1 = CTimg1*w + CXRimg1*(1-w)\n","  \n","  test_CT.append(CTimg1)\n","  test_CXR.append(CXRimg1)\n","  #test_data.append(img1)\n","  test_label.append(2)\n","\n","  CTimg2 = CT_data_3d[CT_nor.index[i]]\n","  CXRimg2 = CXR_data_3d[CXR_nor.index[i]]\n","  #img2 = CTimg2*w + CXRimg2*(1-w)\n","\n","  test_CT.append(CTimg2)\n","  test_CXR.append(CXRimg2)\n","  #test_data.append(img2)\n","  test_label.append(0)\n","\n","  CTimg3 = CT_data_3d[CT_pne.index[i]]\n","  CXRimg3 = CXR_data_3d[CXR_pne.index[i]]\n","  #img3 = CTimg3*w + CXRimg3*(1-w)\n","\n","  test_CT.append(CTimg3)\n","  test_CXR.append(CXRimg3)\n","  #test_data.append(img3)\n","  test_label.append(1)\n","\n","#test_data = np.array(test_data)\n","test_CXR = np.array(test_CXR)\n","test_CT = np.array(test_CT)\n","test_label = np.array(test_label)"],"metadata":{"id":"4qfmyodCSxuO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","print('device:{}'.format(device.type))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A4pzWjUIEtDd","executionInfo":{"status":"ok","timestamp":1653167111957,"user_tz":-480,"elapsed":11,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"844f9cdd-2f75-4592-acfe-2b9084e41f9a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["device:cuda\n"]}]},{"cell_type":"code","source":["data_transforms = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])"],"metadata":{"id":"MfWmjbWFX-NZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# feature extraction \n","def feature_extraction(data, model):\n","  inputs_ls = []\n","  outputs_ls = []\n","  for dat in data:\n","    inputs = data_transforms(dat)\n","    inputs_ls.append(inputs)\n","  del model.fc\n","  model.fc=lambda x:x\n","\n","  for inputs in inputs_ls:\n","    inputs = torch.unsqueeze(inputs, dim=0)\n","    with torch.no_grad():\n","        inputs = inputs.to(device)\n","        outputs = model(inputs)\n","        outputs_ls.append(outputs)\n","        _, preds = torch.max(outputs, 1)\n","  return outputs_ls"],"metadata":{"id":"VPe7bARohA2W"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def fuse_data(CT_data,CXR_data,model,w =0.5):\n","  # CT\n","  CT_features = feature_extraction(CT_data, model)\n","\n","  # CXR\n","  CXR_features = feature_extraction(CXR_data, model)\n","  output = []\n","\n","  for i, (x,y) in enumerate(zip(CXR_features,CT_features)):\n","        CXR_fuse = x[0]*w\n","        CT_fuse = y[0]*(1-w)\n","        _fused_data = CXR_fuse + CT_fuse\n","        output.append(_fused_data)\n","\n","  out = torch.stack(output,0)\n","\n","  return out\n"],"metadata":{"id":"kGt2I2ezhDjB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["googlenet = models.googlenet(pretrained=True)\n","googlenet = googlenet.to(device)"],"metadata":{"id":"hQLlq0PRhGqN","colab":{"base_uri":"https://localhost:8080/","height":67,"referenced_widgets":["3c25a2cb8aab4d05bc31378a9331a09d","c9eb7f974ec74e4f985089296821b1b0","a0d412b453854d23824a2fd4bf73afa0","0345a4002c3943f19a8302a0e2e45a5e","791c9c60eaec4b8a95202ed70f567dca","2f7eddb0011841678c2672f27f4fd674","5bb9d321b15a4a88b3351bc756ec46fc","6758b3d71d504d4f90033817eef1d6d6","47c28426ecfe4ea39c24c42a999d13b8","1871d097e63848da914d3b3a6def6bab","49b53d7991804c11af1040420c0dc107"]},"executionInfo":{"status":"ok","timestamp":1653167126191,"user_tz":-480,"elapsed":14241,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"91f3e3dc-58cf-4dc9-e7f1-b4e2a7c2af30"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading: \"https://download.pytorch.org/models/googlenet-1378be20.pth\" to /root/.cache/torch/hub/checkpoints/googlenet-1378be20.pth\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0.00/49.7M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3c25a2cb8aab4d05bc31378a9331a09d"}},"metadata":{}}]},{"cell_type":"code","source":["fused_train_feature = fuse_data(train_CT,train_CXR,googlenet)\n","fused_test_feature = fuse_data(test_CT,test_CXR,googlenet)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MIbAxGAvhGy6","executionInfo":{"status":"ok","timestamp":1653167723965,"user_tz":-480,"elapsed":24591,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"ddb43980-33a6-4a7f-e6bb-8276282ee2cf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:780: UserWarning: Note that order of the arguments: ceil_mode and return_indices will changeto match the args list in nn.MaxPool2d in a future release.\n","  warnings.warn(\"Note that order of the arguments: ceil_mode and return_indices will change\"\n"]}]},{"cell_type":"code","source":["len(fused_train_feature[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KXb-Gw1Khvtw","executionInfo":{"status":"ok","timestamp":1653167723966,"user_tz":-480,"elapsed":15,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"77e4e04a-0c20-4f30-eaeb-84e4e14f7d41"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1024"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["# 把label转换成tensor\n","y_train=torch.from_numpy(train_label)\n","y_test=torch.from_numpy(test_label)\n","\n","\n","#转换数据\n","x_train=fused_train_feature.float()\n","x_test=fused_test_feature.float()\n","y_train=y_train.long()\n","y_test=y_test.long()\n","\n","# 创建dataset\n","train_dataset=TensorDataset(x_train,y_train)\n","test_dataset=TensorDataset(x_test,y_test)"],"metadata":{"id":"K-KX0ukai1uL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","import torch.nn.functional as F\n","import torch.nn as nn\n","import matplotlib.pyplot as plt\n","from torch.autograd import Variable\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import accuracy_score,mean_squared_error\n","\n","class Net(torch.nn.Module):\n","    def __init__(self,layer_num,n_hidden,act_function=\"relu\"):\n","        super(Net, self).__init__()\n","        '初始化数值'\n","        self.n_input = 1024\n","        self.n_output = 3\n","        self.activation_func = self._act_func_dic(act_function)\n","        self.n_hidden = n_hidden\n","\n","        \"神经网络部分\"\n","        \"输入层\"\n","        self.input = torch.nn.Linear(self.n_input, n_hidden)\n","        \"自定义的中间全连接层，batch——normalization，激活函数\"\n","        layers = []\n","        for i in range(layer_num):\n","            layers.append(nn.Linear(n_hidden, n_hidden))\n","            layers.append(nn.BatchNorm1d(num_features=n_hidden))\n","            layers.append(self.activation_func())\n","            layers.append(nn.Dropout(0.5))\n","        self.linears = nn.ModuleList(layers)\n","        \"输出层\"\n","        self.output_1 = torch.nn.Linear(n_hidden, self.n_output)\n","        self.output_2 = torch.nn.Softmax(dim=1)\n","\n","    def forward(self, input):\n","        x = self.input(input)\n","        for layer in self.linears:\n","            x = layer(x)\n","        x = self.output_1(x)\n","        x = self.output_2(x)\n","        return x\n","\n","    \"\"\"\n","    激活函数的判定\n","    \"\"\"\n","    def _act_func_dic(self,act_func):\n","        if act_func == \"relu\":\n","            act = torch.nn.ReLU\n","        elif act_func == \"tanh\":\n","            act = torch.nn.Tanh\n","        elif act_func == \"sigmoid\":\n","            act = torch.nn.Sigmoid\n","        elif act_func == \"softmax\":\n","            act = torch.nn.Softmax\n","        elif act_func == \"softplus\":\n","            act = torch.nn.Softplus\n","        else:\n","            raise ValueError\n","        print(\"activation function\", act)\n","        return act\n","\n","    def _weight_initialize(self):\n","        \"\"\"\n","        对全连接层的权重做初始化\n","        \"\"\"\n","        for m in self.modules():\n","            if isinstance(m, torch.nn.Linear):\n","                if self.activation_func == F.relu:\n","                    torch.nn.init.kaiming_uniform_(m.weight.data)\n","                elif self.activation_func == F.sigmoid or F.tanh:\n","                    torch.nn.init.xavier_uniform_(m.weight.data)\n","\n","    def pred(self,x_test,y_test):\n","        out = self.forward(x_test)\n","        prediction = torch.max(F.softmax(out, dim=1), 1)[1]\n","        pred_y = prediction.data.numpy().squeeze()\n","        target_y = y_test.data.numpy()\n","        score = accuracy_score(target_y, pred_y)  # 预测中有多少和真实值一样\n","        print(\"Accuracy on test set \",score)"],"metadata":{"id":"8p-W2FL_h3xS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pred_layers = Net(8,1000,act_function=\"relu\")\n","pred_layers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yiOmpTq0iEIy","executionInfo":{"status":"ok","timestamp":1653167723968,"user_tz":-480,"elapsed":13,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"429f0336-d5c4-49d7-88f9-50a5126b3ff4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["activation function <class 'torch.nn.modules.activation.ReLU'>\n"]},{"output_type":"execute_result","data":{"text/plain":["Net(\n","  (input): Linear(in_features=1024, out_features=1000, bias=True)\n","  (linears): ModuleList(\n","    (0): Linear(in_features=1000, out_features=1000, bias=True)\n","    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (2): ReLU()\n","    (3): Dropout(p=0.5, inplace=False)\n","    (4): Linear(in_features=1000, out_features=1000, bias=True)\n","    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (6): ReLU()\n","    (7): Dropout(p=0.5, inplace=False)\n","    (8): Linear(in_features=1000, out_features=1000, bias=True)\n","    (9): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (10): ReLU()\n","    (11): Dropout(p=0.5, inplace=False)\n","    (12): Linear(in_features=1000, out_features=1000, bias=True)\n","    (13): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (14): ReLU()\n","    (15): Dropout(p=0.5, inplace=False)\n","    (16): Linear(in_features=1000, out_features=1000, bias=True)\n","    (17): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (18): ReLU()\n","    (19): Dropout(p=0.5, inplace=False)\n","    (20): Linear(in_features=1000, out_features=1000, bias=True)\n","    (21): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (22): ReLU()\n","    (23): Dropout(p=0.5, inplace=False)\n","    (24): Linear(in_features=1000, out_features=1000, bias=True)\n","    (25): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (26): ReLU()\n","    (27): Dropout(p=0.5, inplace=False)\n","    (28): Linear(in_features=1000, out_features=1000, bias=True)\n","    (29): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (30): ReLU()\n","    (31): Dropout(p=0.5, inplace=False)\n","  )\n","  (output_1): Linear(in_features=1000, out_features=3, bias=True)\n","  (output_2): Softmax(dim=1)\n",")"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["# 放到GPU\n","model = pred_layers.to(device)\n","\n","# 定义损失函数，暂定交叉墒\n","loss_fc = nn.CrossEntropyLoss()\n","\n","\n","# 先随便设置一下\n","optimizer = optim.SGD(model.parameters(), lr=0.7, momentum=0.9)\n","\n","# 学习率调整器，越来越小保证收敛\n","exp_lr_scheduler = lr_scheduler.StepLR(optimizer=optimizer, step_size=20, gamma=0.9)  # step_size"],"metadata":{"id":"NL2iFd8HiH8b"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#相当于mini-batch\n","train_dataloader = DataLoader(dataset=train_dataset,batch_size=512, shuffle=True)\n","\n","val_dataloader = DataLoader(dataset=test_dataset,batch_size=len(test_dataset), shuffle=False)"],"metadata":{"id":"FRWGH9A0iSFV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for epoch in range(1000):\n","\n","    running_loss = 0.0\n","    \n","    for i, sample_batch in enumerate(train_dataloader):\n","        inputs = sample_batch[0]\n","        labels = sample_batch[1]\n","\n","        model.train()\n","\n","        # GPU/CPU\n","        inputs = inputs.to(device)\n","        labels = labels.to(device)\n","\n","        optimizer.zero_grad()\n","\n","        # foward\n","        outputs = model(inputs)\n","\n","        # loss\n","        loss = loss_fc(outputs, labels)\n","\n","        # loss求导，反向\n","        loss.backward()\n","\n","        # 优化\n","        optimizer.step()\n","\n","        #\n","        running_loss += loss.item()\n","    \n","\n","        # 測試\n","        if epoch % 20 == 19:\n","            correct = 0\n","            total = 0\n","            model.eval()\n","            for images_test, labels_test in train_dataloader:\n","                images_test = images_test.to(device)\n","                labels_test = labels_test.to(device)\n","\n","                outputs_test = model(images_test)\n","                _, prediction = torch.max(outputs_test, 1)\n","                correct += (torch.sum((prediction == labels_test))).item()\n","               # print(prediction, labels_test, correct)\n","                total += labels_test.size(0)\n","            print('[{}] running_loss = {:.5f}  train accurcay = {:.5f}'.format(epoch + 1, running_loss / 20,\n","                                                                        correct / total))\n","            running_loss = 0.0\n","    exp_lr_scheduler.step()\n","print('training finish !')\n","# torch.save(model.state_dict(), '/content/MyDrive/MyDrive/Colab Notebooks/MLP_data/Trained_VGG.pth')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qO9QgGVtiVJ_","executionInfo":{"status":"ok","timestamp":1653167748594,"user_tz":-480,"elapsed":24635,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"00786aef-90ad-4c81-d9b0-7dbe189bf7c0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[20] running_loss = 0.04300  train accurcay = 0.33889\n","[20] running_loss = 0.04425  train accurcay = 0.33667\n","[40] running_loss = 0.03751  train accurcay = 0.74667\n","[40] running_loss = 0.03788  train accurcay = 0.74889\n","[60] running_loss = 0.03507  train accurcay = 0.85556\n","[60] running_loss = 0.03492  train accurcay = 0.85556\n","[80] running_loss = 0.03459  train accurcay = 0.87889\n","[80] running_loss = 0.03342  train accurcay = 0.87889\n","[100] running_loss = 0.03294  train accurcay = 0.88444\n","[100] running_loss = 0.03351  train accurcay = 0.88778\n","[120] running_loss = 0.03251  train accurcay = 0.89556\n","[120] running_loss = 0.03298  train accurcay = 0.89667\n","[140] running_loss = 0.03249  train accurcay = 0.90333\n","[140] running_loss = 0.03218  train accurcay = 0.90444\n","[160] running_loss = 0.03243  train accurcay = 0.91111\n","[160] running_loss = 0.03213  train accurcay = 0.91222\n","[180] running_loss = 0.03206  train accurcay = 0.91778\n","[180] running_loss = 0.03116  train accurcay = 0.91778\n","[200] running_loss = 0.03148  train accurcay = 0.92444\n","[200] running_loss = 0.03157  train accurcay = 0.92444\n","[220] running_loss = 0.03165  train accurcay = 0.92444\n","[220] running_loss = 0.03118  train accurcay = 0.92444\n","[240] running_loss = 0.03089  train accurcay = 0.92667\n","[240] running_loss = 0.03156  train accurcay = 0.92667\n","[260] running_loss = 0.03119  train accurcay = 0.92667\n","[260] running_loss = 0.03141  train accurcay = 0.92667\n","[280] running_loss = 0.03118  train accurcay = 0.92889\n","[280] running_loss = 0.03118  train accurcay = 0.92889\n","[300] running_loss = 0.03121  train accurcay = 0.93111\n","[300] running_loss = 0.03108  train accurcay = 0.93111\n","[320] running_loss = 0.03176  train accurcay = 0.93111\n","[320] running_loss = 0.03027  train accurcay = 0.93111\n","[340] running_loss = 0.03118  train accurcay = 0.93111\n","[340] running_loss = 0.03090  train accurcay = 0.93111\n","[360] running_loss = 0.03057  train accurcay = 0.93111\n","[360] running_loss = 0.03157  train accurcay = 0.93111\n","[380] running_loss = 0.03079  train accurcay = 0.93111\n","[380] running_loss = 0.03131  train accurcay = 0.93111\n","[400] running_loss = 0.03079  train accurcay = 0.93222\n","[400] running_loss = 0.03118  train accurcay = 0.93222\n","[420] running_loss = 0.03148  train accurcay = 0.93222\n","[420] running_loss = 0.03028  train accurcay = 0.93222\n","[440] running_loss = 0.03098  train accurcay = 0.93222\n","[440] running_loss = 0.03097  train accurcay = 0.93222\n","[460] running_loss = 0.03088  train accurcay = 0.93222\n","[460] running_loss = 0.03109  train accurcay = 0.93222\n","[480] running_loss = 0.03108  train accurcay = 0.93222\n","[480] running_loss = 0.03092  train accurcay = 0.93222\n","[500] running_loss = 0.03108  train accurcay = 0.93222\n","[500] running_loss = 0.03079  train accurcay = 0.93222\n","[520] running_loss = 0.03138  train accurcay = 0.93222\n","[520] running_loss = 0.03066  train accurcay = 0.93222\n","[540] running_loss = 0.03074  train accurcay = 0.93222\n","[540] running_loss = 0.03117  train accurcay = 0.93222\n","[560] running_loss = 0.03099  train accurcay = 0.93222\n","[560] running_loss = 0.03096  train accurcay = 0.93222\n","[580] running_loss = 0.03050  train accurcay = 0.93222\n","[580] running_loss = 0.03170  train accurcay = 0.93222\n","[600] running_loss = 0.03108  train accurcay = 0.93222\n","[600] running_loss = 0.03052  train accurcay = 0.93222\n","[620] running_loss = 0.03118  train accurcay = 0.93222\n","[620] running_loss = 0.03053  train accurcay = 0.93222\n","[640] running_loss = 0.03128  train accurcay = 0.93333\n","[640] running_loss = 0.03041  train accurcay = 0.93333\n","[660] running_loss = 0.03069  train accurcay = 0.93333\n","[660] running_loss = 0.03105  train accurcay = 0.93333\n","[680] running_loss = 0.03059  train accurcay = 0.93333\n","[680] running_loss = 0.03134  train accurcay = 0.93333\n","[700] running_loss = 0.03137  train accurcay = 0.93333\n","[700] running_loss = 0.03027  train accurcay = 0.93333\n","[720] running_loss = 0.03098  train accurcay = 0.93333\n","[720] running_loss = 0.03067  train accurcay = 0.93333\n","[740] running_loss = 0.03147  train accurcay = 0.93333\n","[740] running_loss = 0.03015  train accurcay = 0.93333\n","[760] running_loss = 0.03059  train accurcay = 0.93444\n","[760] running_loss = 0.03131  train accurcay = 0.93444\n","[780] running_loss = 0.03099  train accurcay = 0.93444\n","[780] running_loss = 0.03066  train accurcay = 0.93444\n","[800] running_loss = 0.03079  train accurcay = 0.93444\n","[800] running_loss = 0.03092  train accurcay = 0.93444\n","[820] running_loss = 0.03109  train accurcay = 0.93444\n","[820] running_loss = 0.03066  train accurcay = 0.93444\n","[840] running_loss = 0.03127  train accurcay = 0.93444\n","[840] running_loss = 0.03019  train accurcay = 0.93444\n","[860] running_loss = 0.03099  train accurcay = 0.93556\n","[860] running_loss = 0.03054  train accurcay = 0.93556\n","[880] running_loss = 0.03078  train accurcay = 0.93556\n","[880] running_loss = 0.03084  train accurcay = 0.93556\n","[900] running_loss = 0.03080  train accurcay = 0.93556\n","[900] running_loss = 0.03078  train accurcay = 0.93556\n","[920] running_loss = 0.03040  train accurcay = 0.93556\n","[920] running_loss = 0.03155  train accurcay = 0.93556\n","[940] running_loss = 0.03069  train accurcay = 0.93556\n","[940] running_loss = 0.03092  train accurcay = 0.93556\n","[960] running_loss = 0.03088  train accurcay = 0.93556\n","[960] running_loss = 0.03066  train accurcay = 0.93556\n","[980] running_loss = 0.03040  train accurcay = 0.93556\n","[980] running_loss = 0.03130  train accurcay = 0.93556\n","[1000] running_loss = 0.03040  train accurcay = 0.93556\n","[1000] running_loss = 0.03131  train accurcay = 0.93556\n","training finish !\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report, confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","model.eval()\n","x_test = x_test.to(device)\n","outputs_test = model(x_test)\n","_, prediction = torch.max(outputs_test, 1)\n","\n","print('classification report: ')\n","print(classification_report(y_test,prediction.cpu(),target_names=['Normal','Pneumonia','COVID-19']))\n","print('')\n","\n","CM = confusion_matrix(y_test,prediction.cpu())\n","sns.set()\n","f,ax=plt.subplots()\n","print('confusion matrix: ')\n","sns.heatmap(CM,annot=True,ax=ax) \n","ax.set_title('confusion matrix') \n","ax.set_xlabel('predict') \n","ax.set_ylabel('true') "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":551},"id":"J65-B18_iYvR","executionInfo":{"status":"ok","timestamp":1653167748595,"user_tz":-480,"elapsed":27,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"7f51a904-5c20-45ae-e345-775a98f5ec0b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["classification report: \n","              precision    recall  f1-score   support\n","\n","      Normal       0.46      0.64      0.53        25\n","   Pneumonia       0.41      0.28      0.33        25\n","    COVID-19       0.52      0.48      0.50        25\n","\n","    accuracy                           0.47        75\n","   macro avg       0.46      0.47      0.46        75\n","weighted avg       0.46      0.47      0.46        75\n","\n","\n","confusion matrix: \n"]},{"output_type":"execute_result","data":{"text/plain":["Text(30.5, 0.5, 'true')"]},"metadata":{},"execution_count":48},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.preprocessing import label_binarize\n","from sklearn.metrics import roc_curve, auc\n","import itertools \n","\n","def get_roc_auc(trues, preds):\n","  labels = [0,1,2]\n","  nb_classes = len(labels)\n","  fpr = dict()\n","  tpr = dict()\n","  roc_auc = dict()\n","\n","  #print(trues, preds)\n","\n","  for i in range(nb_classes):\n","    fpr[i], tpr[i], _ = roc_curve(trues[:, i], preds[:, i])\n","    roc_auc[i] = auc(fpr[i], tpr[i])\n","\n","    # Compute micro-average ROC curve and ROC area\n","  fpr[\"micro\"], tpr[\"micro\"], _ = roc_curve(trues.ravel(), preds.ravel())\n","  roc_auc[\"micro\"] = auc(fpr[\"micro\"], tpr[\"micro\"])\n","\n","  # First aggregate all false positive rates\n","  all_fpr = np.unique(np.concatenate([fpr[i] for i in range(nb_classes)]))\n","  # Then interpolate all ROC curves at this points\n","  mean_tpr = np.zeros_like(all_fpr)\n","\n","  for i in range(nb_classes):\n","    mean_tpr += np.interp(all_fpr, fpr[i], tpr[i])\n","  # Finally average it and compute AUC\n","  mean_tpr /= nb_classes\n","  fpr[\"macro\"] = all_fpr\n","  tpr[\"macro\"] = mean_tpr\n","  roc_auc[\"macro\"] = auc(fpr[\"macro\"], tpr[\"macro\"])\n","  print(roc_auc[\"macro\"])\n","  # Plot all ROC curves\n","  lw = 2\n","  plt.figure()\n","  plt.plot(fpr[\"micro\"], tpr[\"micro\"],label='micro-average ROC curve (area = {0:0.2f})'.format(roc_auc[\"micro\"]),color='deeppink', linestyle=':', linewidth=4)\n","  plt.plot(fpr[\"macro\"], tpr[\"macro\"],label='macro-average ROC curve (area = {0:0.2f})'.format(roc_auc[\"macro\"]),color='navy', linestyle=':', linewidth=4)\n","\n","  colors = itertools.cycle(['aqua', 'darkorange', 'cornflowerblue'])\n","  label_name = ['Normal','Pneumonia','COVID-19']\n","\n","  for i, color in zip(range(nb_classes), colors):\n","    plt.plot(fpr[i], tpr[i], color=color, lw=lw, label='ROC curve of class {0} (area = {1:0.2f})'.format(label_name[i], roc_auc[i]))\n","  plt.plot([0, 1], [0, 1], 'k--', lw=lw)\n","  plt.xlim([0.0, 1.0])\n","  plt.ylim([0.0, 1.05])\n","  plt.xlabel('False Positive Rate')\n","  plt.ylabel('True Positive Rate')\n","  plt.title('GoogleNet extracted feature test on MLP')\n","  plt.legend(loc=\"lower right\")\n","  plt.show()\n","\n","test_trues = label_binarize(y_test, classes=[i for i in range(3)])\n","test_preds = label_binarize(prediction.cpu(), classes=[i for i in range(3)])\n","\n","get_roc_auc(test_trues, test_preds)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":319},"id":"6TOCF3h9co-D","executionInfo":{"status":"ok","timestamp":1653167749485,"user_tz":-480,"elapsed":7,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"39bea9be-4e63-42ae-8963-fc76a517e671"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.6000000000000001\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["resnet18 = models.resnet18(pretrained=True)\n","resnet18 = resnet18.to(device)"],"metadata":{"id":"t6J5KbxIjG45"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fused_train_feature = fuse_data(train_CT,train_CXR,resnet18)\n","fused_test_feature = fuse_data(test_CT,test_CXR,resnet18)"],"metadata":{"id":"6r7Cnd6ylq9w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(fused_train_feature[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KaxHEEM9l2B8","executionInfo":{"status":"ok","timestamp":1653167421349,"user_tz":-480,"elapsed":29,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"86e9b0ae-63ba-4886-a233-ac47638de23c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["512"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# 把label转换成tensor\n","y_train=torch.from_numpy(train_label)\n","y_test=torch.from_numpy(test_label)\n","\n","\n","#转换数据\n","x_train=fused_train_feature.float()\n","x_test=fused_test_feature.float()\n","y_train=y_train.long()\n","y_test=y_test.long()\n","\n","# 创建dataset\n","train_dataset=TensorDataset(x_train,y_train)\n","test_dataset=TensorDataset(x_test,y_test)"],"metadata":{"id":"3A1g_fXhl6Jc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","import torch.nn.functional as F\n","import torch.nn as nn\n","import matplotlib.pyplot as plt\n","from torch.autograd import Variable\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import accuracy_score,mean_squared_error\n","\n","class Net(torch.nn.Module):\n","    def __init__(self,layer_num,n_hidden,act_function=\"relu\"):\n","        super(Net, self).__init__()\n","        '初始化数值'\n","        self.n_input = 512\n","        self.n_output = 3\n","        self.activation_func = self._act_func_dic(act_function)\n","        self.n_hidden = n_hidden\n","\n","        \"神经网络部分\"\n","        \"输入层\"\n","        self.input = torch.nn.Linear(self.n_input, n_hidden)\n","        \"自定义的中间全连接层，batch——normalization，激活函数\"\n","        layers = []\n","        for i in range(layer_num):\n","            layers.append(nn.Linear(n_hidden, n_hidden))\n","            layers.append(nn.BatchNorm1d(num_features=n_hidden))\n","            layers.append(self.activation_func())\n","            layers.append(nn.Dropout(0.5))\n","        self.linears = nn.ModuleList(layers)\n","        \"输出层\"\n","        self.output_1 = torch.nn.Linear(n_hidden, self.n_output)\n","        self.output_2 = torch.nn.Softmax(dim=1)\n","\n","    def forward(self, input):\n","        x = self.input(input)\n","        for layer in self.linears:\n","            x = layer(x)\n","        x = self.output_1(x)\n","        x = self.output_2(x)\n","        return x\n","\n","    \"\"\"\n","    激活函数的判定\n","    \"\"\"\n","    def _act_func_dic(self,act_func):\n","        if act_func == \"relu\":\n","            act = torch.nn.ReLU\n","        elif act_func == \"tanh\":\n","            act = torch.nn.Tanh\n","        elif act_func == \"sigmoid\":\n","            act = torch.nn.Sigmoid\n","        elif act_func == \"softmax\":\n","            act = torch.nn.Softmax\n","        elif act_func == \"softplus\":\n","            act = torch.nn.Softplus\n","        else:\n","            raise ValueError\n","        print(\"activation function\", act)\n","        return act\n","\n","    def _weight_initialize(self):\n","        \"\"\"\n","        对全连接层的权重做初始化\n","        \"\"\"\n","        for m in self.modules():\n","            if isinstance(m, torch.nn.Linear):\n","                if self.activation_func == F.relu:\n","                    torch.nn.init.kaiming_uniform_(m.weight.data)\n","                elif self.activation_func == F.sigmoid or F.tanh:\n","                    torch.nn.init.xavier_uniform_(m.weight.data)\n","\n","    def pred(self,x_test,y_test):\n","        out = self.forward(x_test)\n","        prediction = torch.max(F.softmax(out, dim=1), 1)[1]\n","        pred_y = prediction.data.numpy().squeeze()\n","        target_y = y_test.data.numpy()\n","        score = accuracy_score(target_y, pred_y)  # 预测中有多少和真实值一样\n","        print(\"Accuracy on test set \",score)"],"metadata":{"id":"t2VUuuWwmA4C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pred_layers_res = Net(8,512,act_function=\"relu\")\n","pred_layers_res"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JQ5l9UeqmFfH","executionInfo":{"status":"ok","timestamp":1653167421351,"user_tz":-480,"elapsed":27,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"6a03b1f6-57b2-4ca8-b710-52ebc22b3ce2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["activation function <class 'torch.nn.modules.activation.ReLU'>\n"]},{"output_type":"execute_result","data":{"text/plain":["Net(\n","  (input): Linear(in_features=512, out_features=512, bias=True)\n","  (linears): ModuleList(\n","    (0): Linear(in_features=512, out_features=512, bias=True)\n","    (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (2): ReLU()\n","    (3): Dropout(p=0.5, inplace=False)\n","    (4): Linear(in_features=512, out_features=512, bias=True)\n","    (5): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (6): ReLU()\n","    (7): Dropout(p=0.5, inplace=False)\n","    (8): Linear(in_features=512, out_features=512, bias=True)\n","    (9): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (10): ReLU()\n","    (11): Dropout(p=0.5, inplace=False)\n","    (12): Linear(in_features=512, out_features=512, bias=True)\n","    (13): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (14): ReLU()\n","    (15): Dropout(p=0.5, inplace=False)\n","    (16): Linear(in_features=512, out_features=512, bias=True)\n","    (17): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (18): ReLU()\n","    (19): Dropout(p=0.5, inplace=False)\n","    (20): Linear(in_features=512, out_features=512, bias=True)\n","    (21): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (22): ReLU()\n","    (23): Dropout(p=0.5, inplace=False)\n","    (24): Linear(in_features=512, out_features=512, bias=True)\n","    (25): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (26): ReLU()\n","    (27): Dropout(p=0.5, inplace=False)\n","    (28): Linear(in_features=512, out_features=512, bias=True)\n","    (29): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (30): ReLU()\n","    (31): Dropout(p=0.5, inplace=False)\n","  )\n","  (output_1): Linear(in_features=512, out_features=3, bias=True)\n","  (output_2): Softmax(dim=1)\n",")"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["# 放到GPU\n","model = pred_layers_res.to(device)\n","\n","# 定义损失函数，暂定交叉墒\n","loss_fc = nn.CrossEntropyLoss()\n","\n","\n","# 先随便设置一下\n","optimizer = optim.SGD(model.parameters(), lr=0.7, momentum=0.9)\n","\n","# 学习率调整器，越来越小保证收敛\n","exp_lr_scheduler = lr_scheduler.StepLR(optimizer=optimizer, step_size=20, gamma=0.9)  # step_size"],"metadata":{"id":"AVduBUP0mKmg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#相当于mini-batch\n","train_dataloader = DataLoader(dataset=train_dataset,batch_size=512, shuffle=True)\n","\n","val_dataloader = DataLoader(dataset=test_dataset,batch_size=len(test_dataset), shuffle=False)"],"metadata":{"id":"MqENixTxmRzP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for epoch in range(1000):\n","\n","    running_loss = 0.0\n","    \n","    for i, sample_batch in enumerate(train_dataloader):\n","        inputs = sample_batch[0]\n","        labels = sample_batch[1]\n","\n","        model.train()\n","\n","        # GPU/CPU\n","        inputs = inputs.to(device)\n","        labels = labels.to(device)\n","\n","        optimizer.zero_grad()\n","\n","        # foward\n","        outputs = model(inputs)\n","\n","        # loss\n","        loss = loss_fc(outputs, labels)\n","\n","        # loss求导，反向\n","        loss.backward()\n","\n","        # 优化\n","        optimizer.step()\n","\n","        #\n","        running_loss += loss.item()\n","    \n","\n","        # 測試\n","        if epoch % 20 == 19:\n","            correct = 0\n","            total = 0\n","            model.eval()\n","            for images_test, labels_test in train_dataloader:\n","                images_test = images_test.to(device)\n","                labels_test = labels_test.to(device)\n","\n","                outputs_test = model(images_test)\n","                _, prediction = torch.max(outputs_test, 1)\n","                correct += (torch.sum((prediction == labels_test))).item()\n","               # print(prediction, labels_test, correct)\n","                total += labels_test.size(0)\n","            print('[{}] running_loss = {:.5f}  train accurcay = {:.5f}'.format(epoch + 1, running_loss / 20,\n","                                                                        correct / total))\n","            running_loss = 0.0\n","    exp_lr_scheduler.step()\n","print('training finish !')\n","# torch.save(model.state_dict(), '/content/MyDrive/MyDrive/Colab Notebooks/MLP_data/Trained_VGG.pth')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1hDaRcUimYKv","executionInfo":{"status":"ok","timestamp":1653167438767,"user_tz":-480,"elapsed":17438,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"df30c9ce-a95c-4675-a2c6-774bd35a31c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[20] running_loss = 0.03459  train accurcay = 0.33333\n","[20] running_loss = 0.03756  train accurcay = 0.33333\n","[40] running_loss = 0.03270  train accurcay = 0.58333\n","[40] running_loss = 0.03078  train accurcay = 0.56222\n","[60] running_loss = 0.03108  train accurcay = 0.33222\n","[60] running_loss = 0.03110  train accurcay = 0.33333\n","[80] running_loss = 0.03040  train accurcay = 0.33333\n","[80] running_loss = 0.02987  train accurcay = 0.33333\n","[100] running_loss = 0.02983  train accurcay = 0.33333\n","[100] running_loss = 0.03030  train accurcay = 0.33333\n","[120] running_loss = 0.02899  train accurcay = 0.33333\n","[120] running_loss = 0.03002  train accurcay = 0.33333\n","[140] running_loss = 0.02940  train accurcay = 0.33333\n","[140] running_loss = 0.02962  train accurcay = 0.33333\n","[160] running_loss = 0.02884  train accurcay = 0.51111\n","[160] running_loss = 0.02963  train accurcay = 0.58444\n","[180] running_loss = 0.02934  train accurcay = 0.64889\n","[180] running_loss = 0.02879  train accurcay = 0.68444\n","[200] running_loss = 0.02904  train accurcay = 0.96000\n","[200] running_loss = 0.02921  train accurcay = 0.95889\n","[220] running_loss = 0.02932  train accurcay = 0.97111\n","[220] running_loss = 0.02886  train accurcay = 0.97111\n","[240] running_loss = 0.02923  train accurcay = 0.64778\n","[240] running_loss = 0.02879  train accurcay = 0.68556\n","[260] running_loss = 0.02922  train accurcay = 0.87111\n","[260] running_loss = 0.02889  train accurcay = 0.85444\n","[280] running_loss = 0.02874  train accurcay = 0.96333\n","[280] running_loss = 0.02961  train accurcay = 0.96889\n","[300] running_loss = 0.02913  train accurcay = 0.67778\n","[300] running_loss = 0.02886  train accurcay = 0.69667\n","[320] running_loss = 0.02943  train accurcay = 0.97111\n","[320] running_loss = 0.02847  train accurcay = 0.97111\n","[340] running_loss = 0.02943  train accurcay = 0.97111\n","[340] running_loss = 0.02847  train accurcay = 0.97111\n","[360] running_loss = 0.02913  train accurcay = 0.97111\n","[360] running_loss = 0.02899  train accurcay = 0.97111\n","[380] running_loss = 0.02904  train accurcay = 0.96667\n","[380] running_loss = 0.02885  train accurcay = 0.96556\n","[400] running_loss = 0.02884  train accurcay = 0.96222\n","[400] running_loss = 0.02933  train accurcay = 0.96111\n","[420] running_loss = 0.02868  train accurcay = 0.90667\n","[420] running_loss = 0.02938  train accurcay = 0.87778\n","[440] running_loss = 0.02882  train accurcay = 0.97222\n","[440] running_loss = 0.02918  train accurcay = 0.97222\n","[460] running_loss = 0.02884  train accurcay = 0.97222\n","[460] running_loss = 0.02912  train accurcay = 0.97222\n","[480] running_loss = 0.02904  train accurcay = 0.97222\n","[480] running_loss = 0.02892  train accurcay = 0.97222\n","[500] running_loss = 0.02894  train accurcay = 0.97222\n","[500] running_loss = 0.02899  train accurcay = 0.97222\n","[520] running_loss = 0.02904  train accurcay = 0.97222\n","[520] running_loss = 0.02886  train accurcay = 0.97222\n","[540] running_loss = 0.02913  train accurcay = 0.97222\n","[540] running_loss = 0.02873  train accurcay = 0.97222\n","[560] running_loss = 0.02874  train accurcay = 0.97222\n","[560] running_loss = 0.02924  train accurcay = 0.97222\n","[580] running_loss = 0.02884  train accurcay = 0.97222\n","[580] running_loss = 0.02937  train accurcay = 0.97222\n","[600] running_loss = 0.02865  train accurcay = 0.97222\n","[600] running_loss = 0.02938  train accurcay = 0.97222\n","[620] running_loss = 0.02913  train accurcay = 0.97222\n","[620] running_loss = 0.02872  train accurcay = 0.97222\n","[640] running_loss = 0.02932  train accurcay = 0.97222\n","[640] running_loss = 0.02847  train accurcay = 0.97222\n","[660] running_loss = 0.02892  train accurcay = 0.97222\n","[660] running_loss = 0.02912  train accurcay = 0.97222\n","[680] running_loss = 0.02884  train accurcay = 0.97222\n","[680] running_loss = 0.02913  train accurcay = 0.97222\n","[700] running_loss = 0.02894  train accurcay = 0.97222\n","[700] running_loss = 0.02897  train accurcay = 0.97222\n","[720] running_loss = 0.02900  train accurcay = 0.97222\n","[720] running_loss = 0.02898  train accurcay = 0.97222\n","[740] running_loss = 0.02866  train accurcay = 0.97222\n","[740] running_loss = 0.02949  train accurcay = 0.97222\n","[760] running_loss = 0.02903  train accurcay = 0.97222\n","[760] running_loss = 0.02886  train accurcay = 0.97222\n","[780] running_loss = 0.02865  train accurcay = 0.97222\n","[780] running_loss = 0.02949  train accurcay = 0.97222\n","[800] running_loss = 0.02894  train accurcay = 0.97222\n","[800] running_loss = 0.02899  train accurcay = 0.97222\n","[820] running_loss = 0.02874  train accurcay = 0.97222\n","[820] running_loss = 0.02924  train accurcay = 0.97222\n","[840] running_loss = 0.02873  train accurcay = 0.97222\n","[840] running_loss = 0.02925  train accurcay = 0.97222\n","[860] running_loss = 0.02893  train accurcay = 0.97222\n","[860] running_loss = 0.02899  train accurcay = 0.97222\n","[880] running_loss = 0.02904  train accurcay = 0.97222\n","[880] running_loss = 0.02886  train accurcay = 0.97222\n","[900] running_loss = 0.02884  train accurcay = 0.97222\n","[900] running_loss = 0.02912  train accurcay = 0.97222\n","[920] running_loss = 0.02894  train accurcay = 0.97222\n","[920] running_loss = 0.02899  train accurcay = 0.97222\n","[940] running_loss = 0.02855  train accurcay = 0.97222\n","[940] running_loss = 0.02951  train accurcay = 0.97222\n","[960] running_loss = 0.02835  train accurcay = 0.97222\n","[960] running_loss = 0.02977  train accurcay = 0.97222\n","[980] running_loss = 0.02942  train accurcay = 0.97222\n","[980] running_loss = 0.02835  train accurcay = 0.97222\n","[1000] running_loss = 0.02904  train accurcay = 0.97222\n","[1000] running_loss = 0.02886  train accurcay = 0.97222\n","training finish !\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report, confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","model.eval()\n","x_test = x_test.to(device)\n","outputs_test = model(x_test)\n","_, prediction = torch.max(outputs_test, 1)\n","\n","print('classification report: ')\n","print(classification_report(y_test,prediction.cpu(),target_names=['Normal','Pneumonia','COVID-19']))\n","print('')\n","\n","CM = confusion_matrix(y_test,prediction.cpu())\n","sns.set()\n","f,ax=plt.subplots()\n","print('confusion matrix: ')\n","sns.heatmap(CM,annot=True,ax=ax) \n","ax.set_title('confusion matrix') \n","ax.set_xlabel('predict') \n","ax.set_ylabel('true') "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":551},"id":"VtkylrW0mhPb","executionInfo":{"status":"ok","timestamp":1653167438772,"user_tz":-480,"elapsed":120,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"36606e15-42e4-46d8-8821-365aefb6a027"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["classification report: \n","              precision    recall  f1-score   support\n","\n","      Normal       0.46      0.48      0.47        25\n","   Pneumonia       0.52      0.52      0.52        25\n","    COVID-19       0.62      0.60      0.61        25\n","\n","    accuracy                           0.53        75\n","   macro avg       0.54      0.53      0.53        75\n","weighted avg       0.54      0.53      0.53        75\n","\n","\n","confusion matrix: \n"]},{"output_type":"execute_result","data":{"text/plain":["Text(30.5, 0.5, 'true')"]},"metadata":{},"execution_count":33},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.preprocessing import label_binarize\n","from sklearn.metrics import roc_curve, auc\n","import itertools \n","\n","def get_roc_auc(trues, preds):\n","  labels = [0,1,2]\n","  nb_classes = len(labels)\n","  fpr = dict()\n","  tpr = dict()\n","  roc_auc = dict()\n","\n","  #print(trues, preds)\n","\n","  for i in range(nb_classes):\n","    fpr[i], tpr[i], _ = roc_curve(trues[:, i], preds[:, i])\n","    roc_auc[i] = auc(fpr[i], tpr[i])\n","\n","    # Compute micro-average ROC curve and ROC area\n","  fpr[\"micro\"], tpr[\"micro\"], _ = roc_curve(trues.ravel(), preds.ravel())\n","  roc_auc[\"micro\"] = auc(fpr[\"micro\"], tpr[\"micro\"])\n","\n","  # First aggregate all false positive rates\n","  all_fpr = np.unique(np.concatenate([fpr[i] for i in range(nb_classes)]))\n","  # Then interpolate all ROC curves at this points\n","  mean_tpr = np.zeros_like(all_fpr)\n","\n","  for i in range(nb_classes):\n","    mean_tpr += np.interp(all_fpr, fpr[i], tpr[i])\n","  # Finally average it and compute AUC\n","  mean_tpr /= nb_classes\n","  fpr[\"macro\"] = all_fpr\n","  tpr[\"macro\"] = mean_tpr\n","  roc_auc[\"macro\"] = auc(fpr[\"macro\"], tpr[\"macro\"])\n","  print(roc_auc[\"macro\"])\n","  # Plot all ROC curves\n","  lw = 2\n","  plt.figure()\n","  plt.plot(fpr[\"micro\"], tpr[\"micro\"],label='micro-average ROC curve (area = {0:0.2f})'.format(roc_auc[\"micro\"]),color='deeppink', linestyle=':', linewidth=4)\n","  plt.plot(fpr[\"macro\"], tpr[\"macro\"],label='macro-average ROC curve (area = {0:0.2f})'.format(roc_auc[\"macro\"]),color='navy', linestyle=':', linewidth=4)\n","\n","  colors = itertools.cycle(['aqua', 'darkorange', 'cornflowerblue'])\n","  label_name = ['Normal','Pneumonia','COVID-19']\n","\n","  for i, color in zip(range(nb_classes), colors):\n","    plt.plot(fpr[i], tpr[i], color=color, lw=lw, label='ROC curve of class {0} (area = {1:0.2f})'.format(label_name[i], roc_auc[i]))\n","  plt.plot([0, 1], [0, 1], 'k--', lw=lw)\n","  plt.xlim([0.0, 1.0])\n","  plt.ylim([0.0, 1.05])\n","  plt.xlabel('False Positive Rate')\n","  plt.ylabel('True Positive Rate')\n","  plt.title('ResNet extracted feature test on MLP ')\n","  plt.legend(loc=\"lower right\")\n","  plt.show()\n","\n","test_trues = label_binarize(y_test, classes=[i for i in range(3)])\n","test_preds = label_binarize(prediction.cpu(), classes=[i for i in range(3)])\n","\n","get_roc_auc(test_trues, test_preds)\n"],"metadata":{"id":"rPH7BJsrmqXo","colab":{"base_uri":"https://localhost:8080/","height":319},"executionInfo":{"status":"ok","timestamp":1653167586654,"user_tz":-480,"elapsed":805,"user":{"displayName":"benjamin yang","userId":"12485191019422951801"}},"outputId":"0ccc7986-a425-4d60-bbfe-e4863490beab"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.65\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}